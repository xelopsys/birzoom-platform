import type { NextPage } from "next";
import React, { useState, useEffect } from "react";
import Head from "next/head";
import Image from "next/image";
import Sidebar from "../../components/Sidebar/Sidebar";
import Navbar from "../../components/Navbar/Navbar";
import { NavbarBottom } from "../../components/NavbarBottom/NavbarBottom";
import { collection, getDocs } from "firebase/firestore";
import { db, storage } from "../../firebase/firebase";
import { useRouter } from "next/router";
import { GetServerSideProps } from "next";
import { Table } from "../../components/Table/Table";
import Pagination from "../../components/Pagination/Pagination";
export default function Teachers() {
	const [searchValue, setSearchValue] = useState("");
	const [categoryValue, setCategoryValue] = useState("");
	const [users, setUsers] = useState<any[]>([]);
	const { locale, asPath } = useRouter();
	const [isUpdated, setIsUpdated] = useState<boolean>(false);
	const [currentPage, setCurrentPage] = useState<number>(1);
	const [usersPerPage, setUsersPerPage] = useState<any[]>([]);
	const [recordsPerPage] = useState<number>(5);
	const indexOfLastRecord = currentPage * recordsPerPage;
	const indexOfFirstRecord = indexOfLastRecord - recordsPerPage;

	useEffect(() => {
		const fetchData = async () => {
			const data = await getDocs(collection(db, "mockdata"));
			let list: any[] = [];
			data.forEach((doc) => {
				list.push({ ...doc.data(), id: doc.id });
				setUsers([...list]);
			});
		};
		fetchData();
	}, [isUpdated]);

	useEffect(() => {
		setUsersPerPage([...users.slice(indexOfFirstRecord, indexOfLastRecord)]);
	}, [users, currentPage]);

	useEffect(() => {
		setUsersPerPage([
			...users.filter((user) => {
				switch (categoryValue) {
					case "name":
						return user.name.toLowerCase().includes(searchValue.toLowerCase());
					case "surname":
						return user.surname
							.toLowerCase()
							.includes(searchValue.toLowerCase());
					case "number":
						return user.number.toString().includes(searchValue);
					case "region":
						return user.region
							.toLowerCase()
							.includes(searchValue.toLowerCase());
					default:
						return null;
				}
			}),
		]);
	}, [searchValue]);

	return (
		<div className="w-[100vw] h-[100vh] m-0 p-0 bg-bgColor">
			<Head>
				<title>Create Next App</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>

			<div className="w-full h-full flex flex-row ">
				<Sidebar />
				<div className="w-full">
					<Navbar />
					<NavbarBottom
						setSearchValue={setSearchValue}
						setCategoryValue={setCategoryValue}
					/>
					<div className="w-full h-auto my-6 px-4">
						<Table
							users={usersPerPage}
							isUpdated={setIsUpdated}
							currentPage={currentPage}
						/>
					</div>
					<div className="w-full h-auto text-center content-center my-6 px-4">
						<Pagination
							setCurrentPage={setCurrentPage}
							userLength={users.length}
						/>
					</div>
				</div>
			</div>
		</div>
	);
}

export const getServerSideProps: GetServerSideProps = async (context: any) => {
	const cookie = context.req.cookies;

	if (cookie.role === undefined || cookie.role === "" || !cookie.role) {
		return {
			redirect: {
				destination: "/signin",
				permanent: false,
			},
		};
	}
	return {
		props: {},
	};
};
